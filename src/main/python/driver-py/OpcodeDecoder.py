import sys
from typing import Callable, Any, TypeVar, NamedTuple
from math import floor
from itertools import count

import module_
import _dafny
import System_
import Int
import EVMOpcodes

# Module: OpcodeDecoder

class default__:
    def  __init__(self):
        pass

    @staticmethod
    def Decode(op):
        if (op) == (0):
            return EVMOpcodes.Opcode_SysOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "STOP")), EVMOpcodes.default__.STOP)
        elif (op) == (1):
            return EVMOpcodes.Opcode_ArithOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "ADD")), EVMOpcodes.default__.ADD)
        elif (op) == (2):
            return EVMOpcodes.Opcode_ArithOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "MUL")), EVMOpcodes.default__.MUL)
        elif (op) == (3):
            return EVMOpcodes.Opcode_ArithOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SUB")), EVMOpcodes.default__.SUB)
        elif (op) == (4):
            return EVMOpcodes.Opcode_ArithOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DIV")), EVMOpcodes.default__.DIV)
        elif (op) == (5):
            return EVMOpcodes.Opcode_ArithOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SDIV")), EVMOpcodes.default__.SDIV)
        elif (op) == (6):
            return EVMOpcodes.Opcode_ArithOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "MOD")), EVMOpcodes.default__.MOD)
        elif (op) == (7):
            return EVMOpcodes.Opcode_ArithOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SMOD")), EVMOpcodes.default__.SMOD)
        elif (op) == (8):
            return EVMOpcodes.Opcode_ArithOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "ADDMOD")), EVMOpcodes.default__.ADDMOD)
        elif (op) == (9):
            return EVMOpcodes.Opcode_ArithOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "MULMOD")), EVMOpcodes.default__.MULMOD)
        elif (op) == (10):
            return EVMOpcodes.Opcode_ArithOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "EXP")), EVMOpcodes.default__.EXP)
        elif (op) == (11):
            return EVMOpcodes.Opcode_ArithOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SIGNEXTEND")), EVMOpcodes.default__.SIGNEXTEND)
        elif (op) == (16):
            return EVMOpcodes.Opcode_CompOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "LT")), EVMOpcodes.default__.LT)
        elif (op) == (17):
            return EVMOpcodes.Opcode_CompOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "GT")), EVMOpcodes.default__.GT)
        elif (op) == (18):
            return EVMOpcodes.Opcode_CompOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SLT")), EVMOpcodes.default__.SLT)
        elif (op) == (19):
            return EVMOpcodes.Opcode_CompOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SGT")), EVMOpcodes.default__.SGT)
        elif (op) == (20):
            return EVMOpcodes.Opcode_CompOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "EQ")), EVMOpcodes.default__.EQ)
        elif (op) == (21):
            return EVMOpcodes.Opcode_CompOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "ISZERO")), EVMOpcodes.default__.ISZERO)
        elif (op) == (22):
            return EVMOpcodes.Opcode_BitwiseOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "AND")), EVMOpcodes.default__.AND)
        elif (op) == (23):
            return EVMOpcodes.Opcode_BitwiseOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "OR")), EVMOpcodes.default__.OR)
        elif (op) == (24):
            return EVMOpcodes.Opcode_BitwiseOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "XOR")), EVMOpcodes.default__.XOR)
        elif (op) == (25):
            return EVMOpcodes.Opcode_BitwiseOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "NOT")), EVMOpcodes.default__.NOT)
        elif (op) == (26):
            return EVMOpcodes.Opcode_BitwiseOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "BYTE")), EVMOpcodes.default__.BYTE)
        elif (op) == (27):
            return EVMOpcodes.Opcode_BitwiseOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SHL")), EVMOpcodes.default__.SHL)
        elif (op) == (28):
            return EVMOpcodes.Opcode_BitwiseOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SHR")), EVMOpcodes.default__.SHR)
        elif (op) == (29):
            return EVMOpcodes.Opcode_BitwiseOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SAR")), EVMOpcodes.default__.SAR)
        elif (op) == (32):
            return EVMOpcodes.Opcode_KeccakOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "KECCAK256")), EVMOpcodes.default__.KECCAK256)
        elif (op) == (48):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "ADDRESS")), EVMOpcodes.default__.ADDRESS)
        elif (op) == (49):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "BALANCE")), EVMOpcodes.default__.BALANCE)
        elif (op) == (50):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "ORIGIN")), EVMOpcodes.default__.ORIGIN)
        elif (op) == (51):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "CALLER")), EVMOpcodes.default__.CALLER)
        elif (op) == (52):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "CALLVALUE")), EVMOpcodes.default__.CALLVALUE)
        elif (op) == (53):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "CALLDATALOAD")), EVMOpcodes.default__.CALLDATALOAD)
        elif (op) == (54):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "CALLDATASIZE")), EVMOpcodes.default__.CALLDATASIZE)
        elif (op) == (55):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "CALLDATACOPY")), EVMOpcodes.default__.CALLDATACOPY)
        elif (op) == (56):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "CODESIZE")), EVMOpcodes.default__.CODESIZE)
        elif (op) == (57):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "CODECOPY")), EVMOpcodes.default__.CODECOPY)
        elif (op) == (58):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "GASPRICE")), EVMOpcodes.default__.GASPRICE)
        elif (op) == (59):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "EXTCODESIZE")), EVMOpcodes.default__.EXTCODESIZE)
        elif (op) == (60):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "EXTCODECOPY")), EVMOpcodes.default__.EXTCODECOPY)
        elif (op) == (61):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "RETURNDATASIZE")), EVMOpcodes.default__.RETURNDATASIZE)
        elif (op) == (62):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "RETURNDATACOPY")), EVMOpcodes.default__.RETURNDATACOPY)
        elif (op) == (63):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "EXTCODEHASH")), EVMOpcodes.default__.EXTCODEHASH)
        elif (op) == (64):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "BLOCKHASH")), EVMOpcodes.default__.BLOCKHASH)
        elif (op) == (65):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "COINBASE")), EVMOpcodes.default__.COINBASE)
        elif (op) == (66):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "TIMESTAMP")), EVMOpcodes.default__.TIMESTAMP)
        elif (op) == (67):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "NUMBER")), EVMOpcodes.default__.NUMBER)
        elif (op) == (68):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DIFFICULTY")), EVMOpcodes.default__.DIFFICULTY)
        elif (op) == (69):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "GASLIMIT")), EVMOpcodes.default__.GASLIMIT)
        elif (op) == (70):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "CHAINID")), EVMOpcodes.default__.CHAINID)
        elif (op) == (71):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SELFBALANCE")), EVMOpcodes.default__.SELFBALANCE)
        elif (op) == (72):
            return EVMOpcodes.Opcode_EnvOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "BASEFEE")), EVMOpcodes.default__.BASEFEE)
        elif (op) == (80):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "POP")), EVMOpcodes.default__.POP)
        elif (op) == (81):
            return EVMOpcodes.Opcode_MemOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "MLOAD")), EVMOpcodes.default__.MLOAD)
        elif (op) == (82):
            return EVMOpcodes.Opcode_MemOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "MSTORE")), EVMOpcodes.default__.MSTORE)
        elif (op) == (83):
            return EVMOpcodes.Opcode_MemOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "MSTORE8")), EVMOpcodes.default__.MSTORE8)
        elif (op) == (84):
            return EVMOpcodes.Opcode_StorageOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SLOAD")), EVMOpcodes.default__.SLOAD)
        elif (op) == (85):
            return EVMOpcodes.Opcode_StorageOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SSTORE")), EVMOpcodes.default__.SSTORE)
        elif (op) == (86):
            return EVMOpcodes.Opcode_JumpOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "JUMP")), EVMOpcodes.default__.JUMP)
        elif (op) == (87):
            return EVMOpcodes.Opcode_JumpOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "JUMPI")), EVMOpcodes.default__.JUMPI)
        elif (op) == (88):
            return EVMOpcodes.Opcode_RunOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PC")), EVMOpcodes.default__.PC)
        elif (op) == (89):
            return EVMOpcodes.Opcode_RunOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "MSIZE")), EVMOpcodes.default__.MSIZE)
        elif (op) == (90):
            return EVMOpcodes.Opcode_RunOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "GAS")), EVMOpcodes.default__.GAS)
        elif (op) == (91):
            return EVMOpcodes.Opcode_JumpOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "JUMPDEST")), EVMOpcodes.default__.JUMPDEST)
        elif (op) == (95):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH0")), EVMOpcodes.default__.PUSH0)
        elif (op) == (96):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH1")), EVMOpcodes.default__.PUSH1)
        elif (op) == (97):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH2")), EVMOpcodes.default__.PUSH2)
        elif (op) == (98):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH3")), EVMOpcodes.default__.PUSH3)
        elif (op) == (99):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH4")), EVMOpcodes.default__.PUSH4)
        elif (op) == (100):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH5")), EVMOpcodes.default__.PUSH5)
        elif (op) == (101):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH6")), EVMOpcodes.default__.PUSH6)
        elif (op) == (102):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH7")), EVMOpcodes.default__.PUSH7)
        elif (op) == (103):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH8")), EVMOpcodes.default__.PUSH8)
        elif (op) == (104):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH9")), EVMOpcodes.default__.PUSH9)
        elif (op) == (105):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH10")), EVMOpcodes.default__.PUSH10)
        elif (op) == (106):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH11")), EVMOpcodes.default__.PUSH11)
        elif (op) == (107):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH12")), EVMOpcodes.default__.PUSH12)
        elif (op) == (108):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH13")), EVMOpcodes.default__.PUSH13)
        elif (op) == (109):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH14")), EVMOpcodes.default__.PUSH14)
        elif (op) == (110):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH15")), EVMOpcodes.default__.PUSH15)
        elif (op) == (111):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH16")), EVMOpcodes.default__.PUSH16)
        elif (op) == (112):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH17")), EVMOpcodes.default__.PUSH17)
        elif (op) == (113):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH18")), EVMOpcodes.default__.PUSH18)
        elif (op) == (114):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH19")), EVMOpcodes.default__.PUSH19)
        elif (op) == (115):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH20")), EVMOpcodes.default__.PUSH20)
        elif (op) == (116):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH21")), EVMOpcodes.default__.PUSH21)
        elif (op) == (117):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH22")), EVMOpcodes.default__.PUSH22)
        elif (op) == (118):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH23")), EVMOpcodes.default__.PUSH23)
        elif (op) == (119):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH24")), EVMOpcodes.default__.PUSH24)
        elif (op) == (120):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH25")), EVMOpcodes.default__.PUSH25)
        elif (op) == (121):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH26")), EVMOpcodes.default__.PUSH26)
        elif (op) == (122):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH27")), EVMOpcodes.default__.PUSH27)
        elif (op) == (123):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH28")), EVMOpcodes.default__.PUSH28)
        elif (op) == (124):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH29")), EVMOpcodes.default__.PUSH29)
        elif (op) == (125):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH30")), EVMOpcodes.default__.PUSH30)
        elif (op) == (126):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH31")), EVMOpcodes.default__.PUSH31)
        elif (op) == (127):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "PUSH32")), EVMOpcodes.default__.PUSH32)
        elif (op) == (128):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP1")), EVMOpcodes.default__.DUP1)
        elif (op) == (129):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP2")), EVMOpcodes.default__.DUP2)
        elif (op) == (130):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP3")), EVMOpcodes.default__.DUP3)
        elif (op) == (131):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP4")), EVMOpcodes.default__.DUP4)
        elif (op) == (132):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP5")), EVMOpcodes.default__.DUP5)
        elif (op) == (133):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP6")), EVMOpcodes.default__.DUP6)
        elif (op) == (134):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP7")), EVMOpcodes.default__.DUP7)
        elif (op) == (135):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP8")), EVMOpcodes.default__.DUP8)
        elif (op) == (136):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP9")), EVMOpcodes.default__.DUP9)
        elif (op) == (137):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP10")), EVMOpcodes.default__.DUP10)
        elif (op) == (138):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP11")), EVMOpcodes.default__.DUP11)
        elif (op) == (139):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP12")), EVMOpcodes.default__.DUP12)
        elif (op) == (140):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP13")), EVMOpcodes.default__.DUP13)
        elif (op) == (141):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP14")), EVMOpcodes.default__.DUP14)
        elif (op) == (142):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP15")), EVMOpcodes.default__.DUP15)
        elif (op) == (143):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DUP16")), EVMOpcodes.default__.DUP16)
        elif (op) == (144):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP1")), EVMOpcodes.default__.SWAP1)
        elif (op) == (145):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP2")), EVMOpcodes.default__.SWAP2)
        elif (op) == (146):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP3")), EVMOpcodes.default__.SWAP3)
        elif (op) == (147):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP4")), EVMOpcodes.default__.SWAP4)
        elif (op) == (148):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP5")), EVMOpcodes.default__.SWAP5)
        elif (op) == (149):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP6")), EVMOpcodes.default__.SWAP6)
        elif (op) == (150):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP7")), EVMOpcodes.default__.SWAP7)
        elif (op) == (151):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP8")), EVMOpcodes.default__.SWAP8)
        elif (op) == (152):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP9")), EVMOpcodes.default__.SWAP9)
        elif (op) == (153):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP10")), EVMOpcodes.default__.SWAP10)
        elif (op) == (154):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP11")), EVMOpcodes.default__.SWAP11)
        elif (op) == (155):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP12")), EVMOpcodes.default__.SWAP12)
        elif (op) == (156):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP13")), EVMOpcodes.default__.SWAP13)
        elif (op) == (157):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP14")), EVMOpcodes.default__.SWAP14)
        elif (op) == (158):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP15")), EVMOpcodes.default__.SWAP15)
        elif (op) == (159):
            return EVMOpcodes.Opcode_StackOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SWAP16")), EVMOpcodes.default__.SWAP16)
        elif (op) == (160):
            return EVMOpcodes.Opcode_LogOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "LOG0")), EVMOpcodes.default__.LOG0)
        elif (op) == (161):
            return EVMOpcodes.Opcode_LogOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "LOG1")), EVMOpcodes.default__.LOG1)
        elif (op) == (162):
            return EVMOpcodes.Opcode_LogOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "LOG2")), EVMOpcodes.default__.LOG2)
        elif (op) == (163):
            return EVMOpcodes.Opcode_LogOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "LOG3")), EVMOpcodes.default__.LOG3)
        elif (op) == (164):
            return EVMOpcodes.Opcode_LogOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "LOG4")), EVMOpcodes.default__.LOG4)
        elif (op) == (240):
            return EVMOpcodes.Opcode_SysOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "CREATE")), EVMOpcodes.default__.CREATE)
        elif (op) == (241):
            return EVMOpcodes.Opcode_SysOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "CALL")), EVMOpcodes.default__.CALL)
        elif (op) == (242):
            return EVMOpcodes.Opcode_SysOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "CALLCODE")), EVMOpcodes.default__.CALLCODE)
        elif (op) == (243):
            return EVMOpcodes.Opcode_SysOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "RETURN")), EVMOpcodes.default__.RETURN)
        elif (op) == (244):
            return EVMOpcodes.Opcode_SysOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "DELEGATECALL")), EVMOpcodes.default__.DELEGATECALL)
        elif (op) == (245):
            return EVMOpcodes.Opcode_SysOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "CREATE2")), EVMOpcodes.default__.CREATE2)
        elif (op) == (250):
            return EVMOpcodes.Opcode_SysOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "STATICCALL")), EVMOpcodes.default__.STATICCALL)
        elif (op) == (253):
            return EVMOpcodes.Opcode_SysOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "REVERT")), EVMOpcodes.default__.REVERT)
        elif (op) == (255):
            return EVMOpcodes.Opcode_SysOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "SELFDESTRUCT")), EVMOpcodes.default__.SELFDESTRUCT)
        elif True:
            return EVMOpcodes.Opcode_SysOp(_dafny.SeqWithoutIsStrInference(map(_dafny.CodePoint, "INVALID")), EVMOpcodes.default__.INVALID)

